version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aima_postgres
    environment:
      POSTGRES_DB: aima_db
      POSTGRES_USER: aima_user
      POSTGRES_PASSWORD: aima_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    networks:
      - aima_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aima_user -d aima_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aima_redis
    command: redis-server --appendonly yes --requirepass aima_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - aima_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "aima_redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: aima_backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://aima_user:aima_password@postgres:5432/aima_db
      REDIS_URL: redis://:aima_redis_password@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      CORS_ORIGIN: http://localhost:5173
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: 524288000
      RUNPOD_API_KEY: your-runpod-api-key
      VAST_API_KEY: your-vast-api-key
      AWS_ACCESS_KEY_ID: your-aws-access-key
      AWS_SECRET_ACCESS_KEY: your-aws-secret-key
      AWS_REGION: us-east-1
      AWS_S3_BUCKET: aima-storage
      OPENAI_API_KEY: your-openai-api-key
      ANTHROPIC_API_KEY: your-anthropic-api-key
      WEBHOOK_SECRET: your-webhook-secret
      RUNPOD_WEBHOOK_SECRET: your-runpod-webhook-secret
      VAST_WEBHOOK_SECRET: your-vast-webhook-secret
      JOB_WEBHOOK_SECRET: your-job-webhook-secret
      STORAGE_WEBHOOK_SECRET: your-storage-webhook-secret
    volumes:
      - ./server:/app
      - /app/node_modules
      - uploads_data:/app/uploads
    ports:
      - "3001:3001"
    networks:
      - aima_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend (Vite React)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: aima_frontend
    environment:
      VITE_API_URL: http://localhost:3001
      VITE_WS_URL: ws://localhost:3001
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./index.html:/app/index.html
      - ./vite.config.ts:/app/vite.config.ts
      - ./tailwind.config.js:/app/tailwind.config.js
      - ./postcss.config.js:/app/postcss.config.js
      - /app/node_modules
    ports:
      - "5173:5173"
    networks:
      - aima_network
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: aima_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - aima_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

  # MinIO for local S3-compatible storage (Development)
  minio:
    image: minio/minio:latest
    container_name: aima_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - aima_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    profiles:
      - development

  # Adminer for database management (Development)
  adminer:
    image: adminer:latest
    container_name: aima_adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8080:8080"
    networks:
      - aima_network
    depends_on:
      - postgres
    profiles:
      - development

  # Redis Commander for Redis management (Development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: aima_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:aima_redis_password
    ports:
      - "8081:8081"
    networks:
      - aima_network
    depends_on:
      - redis
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  minio_data:
    driver: local

networks:
  aima_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16